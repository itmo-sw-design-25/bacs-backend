services:
  bacs.frontend:
    image: ${BACS_FRONTEND_IMAGE}
    container_name: bacs.frontend
    platform: ${BACS_PLATFORM}
    restart: unless-stopped
    networks:
      - bacs

  bacs.api:
    image: ${BACS_API_IMAGE}
    container_name: bacs.api
    build:
      context: .
      dockerfile: Source/Presentation/BaCS.Presentation.API/Dockerfile
    platform: ${BACS_PLATFORM}
    env_file: .env
    environment:
      PostgresOptions__Username: ${BACS_PG_USER}
      PostgresOptions__Password: ${BACS_PG_PASSWORD}
      PostgresOptions__Host: ${BACS_PG_HOST}
      PostgresOptions__Port: ${BACS_PG_PORT}
      PostgresOptions__Database: ${BACS_PG_DATABASE}
      PostgresOptions__Schema: ${BACS_PG_SCHEMA}
      PostgresOptions__AdditionalProperties: ${BACS_PG_ADDITIONAL_PROPERTIES}
      MinioOptions__AccessKey: ${BACS_MINIO_ACCESS_KEY}
      MinioOptions__SecretKey: ${BACS_MINIO_SECRET_KEY}
      MinioOptions__Url: ${BACS_MINIO_URL}
      MinioOptions__ProxyUrl: ${BACS_MINIO_PROXY_URL}
      MinioOptions__WithSSL: ${BACS_MINIO_WITH_SSL}
      Keycloak__Credentials__Secret: ${KEYCLOAK_CLIENT_SECRET}
      EmailOptions__Username: ${EMAIL_NOTIFICATIONS_USERNAME}
      EmailOptions__Password: ${EMAIL_NOTIFICATIONS_PASSWORD}
      EmailOptions__SmtpServer: ${EMAIL_NOTIFICATIONS_SMTP_SERVER}
      EmailOptions__Port: ${EMAIL_NOTIFICATIONS_PORT}
    restart: unless-stopped
    depends_on:
      - postgres
    networks:
      - bacs

  postgres:
    image: postgres:latest
    container_name: postgres
    env_file: .env
    networks:
      - bacs
    volumes:
      - ./pg_data:/var/lib/postgresql/data

  postgres_exporter:
    image: bitnami/postgres-exporter:latest
    container_name: postgres_exporter
    env_file: .env
    networks:
      - bacs

  minio:
    image: bitnami/minio:latest
    container_name: minio
    env_file: .env
    networks:
      - bacs
    volumes:
      - ./minio_data:/bitnami/minio/data

  jaeger:
    image: jaegertracing/jaeger:2.6.0
    container_name: jaeger
    env_file: .env
    volumes:
      - ./jaeger_data:/badger
      - ./.deployment/jaeger/config.yaml:/etc/jaeger/config.yaml:ro
    command: [ "--config=/etc/jaeger/config.yaml" ]
    user: ${JAEGER_USER_ID}
    networks:
      - bacs

  grafana:
    image: grafana/grafana
    container_name: grafana
    volumes:
      - ./grafana_data:/var/lib/grafana
      - ./grafana_data/plugins:/var/lib/grafana/plugins
      - ./.deployment/grafana/grafana.ini:/etc/grafana/grafana.ini:ro
      - ./.deployment/grafana/datasources.yaml:/etc/grafana/provisioning/datasources/ds.yaml
    user: ${GF_USER_ID}
    env_file: .env
    networks:
      - bacs

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prom_data:/prometheus
      - ./.deployment/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--web.external-url=/prometheus/"
    networks:
      - bacs

  seq:
    image: datalust/seq
    container_name: seq
    volumes:
      - ./seq_data:/data
    env_file: .env
    restart: unless-stopped
    networks:
      - bacs

  nginx:
    image: nginx:1.27.4-alpine-slim
    container_name: nginx
    ports:
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ${NGINX_CERTS_FULLCHAIN_PATH}:/etc/nginx/certs/fullchain.pem:ro
      - ${NGINX_PRIVKEY_PATH}:/etc/nginx/certs/privkey.pem:ro
      - ./.deployment/nginx/html:/usr/share/nginx/html/:ro
      - ./.deployment/nginx/templates:/etc/nginx/templates/:ro
    env_file: .env
    restart: unless-stopped
    networks:
      - bacs

  cadvisor:
    container_name: cadvisor
    image: gcr.io/cadvisor/cadvisor:latest
    volumes:
      - /:/rootfs:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker
    privileged: true
    networks:
      - bacs

  keycloak:
    image: quay.io/keycloak/keycloak:26.2.0
    container_name: keycloak
    env_file: .env
    command: start --verbose
    volumes:
      - ${KC_CERTS_CRT}:${KC_HTTPS_CERTIFICATE_FILE}:ro
      - ${KC_CERTS_KEY}:${KC_HTTPS_CERTIFICATE_KEY_FILE}:ro
      - ./.deployment/keycloak/themes:/opt/keycloak/themes/:ro
    depends_on:
      - postgres
    networks:
      - bacs

volumes:
  pg_data:
  grafana_data:
  prom_data:
  seq_data:
  minio_data:
  jaeger_data:

networks:
  bacs:
    driver: bridge
