service:
  extensions: [ jaeger_storage, jaeger_query ]
  pipelines:
    traces:
      receivers: [ otlp ]
      processors: [ batch ]
      exporters: [ jaeger_storage_exporter, spanmetrics ]
    metrics/spanmetrics:
      receivers: [ spanmetrics ]
      exporters: [ prometheus ]
  telemetry:
    resource:
      service.name: jaeger
    logs:
      level: info

receivers:
  otlp:
    protocols:
      grpc: { endpoint: 0.0.0.0:4317 }
      http: { endpoint: 0.0.0.0:4318 }

processors:
  batch: { }

exporters:
  jaeger_storage_exporter:
    trace_storage: local_storage
  prometheus:
    endpoint: 0.0.0.0:8889

connectors:
  spanmetrics:
    histogram:
      explicit:
        buckets: [ 100us, 1ms, 2ms, 6ms, 10ms, 100ms, 250ms, 500ms, 1s, 2s, 5s, 10s, 30s, 1m ]
    dimensions:
      - name: http.request.method
        default: GET
      - name: http.response.status_code
    exemplars:
      enabled: true
    dimensions_cache_size: 1000
    aggregation_temporality: "AGGREGATION_TEMPORALITY_CUMULATIVE"
    metrics_flush_interval: 15s
    metrics_expiration: 5m
    events:
      enabled: true
      dimensions:
        - name: exception.type
        - name: exception.message
    resource_metrics_key_attributes:
      - otel.scope.name
      - telemetry.sdk.language
      - telemetry.sdk.name
    include_instrumentation_scope:
      - express

extensions:
  jaeger_storage:
    backends:
      local_storage:
        badger:
          directories:
            keys: "/badger/keys"
            values: "/badger/values"
          ephemeral: false
    metric_backends:
      prometheus_metrics_storage:
        prometheus:
          endpoint: http://prometheus:9090/prometheus
          normalize_calls: true
          normalize_duration: true
  jaeger_query:
    storage:
      traces: local_storage
      metrics: prometheus_metrics_storage
    http: { endpoint: 0.0.0.0:16686 }
    grpc: { endpoint: 0.0.0.0:16685 }
    base_path: "${QUERY_BASE_PATH}"
