image: mcr.microsoft.com/dotnet/sdk:9.0-alpine3.20

variables:
  BUILD_PATH: "Source/Presentation/BaCS.Presentation.API"
  TESTS_PATH: "Tests/BaCS.Unit.Tests"
  DOCKER_CONFIG_PATH: "./"
  DOCKER_TLS_CERTDIR: "/certs"

.default_rules:
  rules:
    changes:
      - Source/**/*.{cs,csproj,props,sln}
      - Tests/**/*.{cs,csproj,props,sln}
      - BaCS.sln
      - Directory.Build.props
      - Directory.Packages.props

workflow:
  auto_cancel:
    on_new_commit: interruptible

stages:
  - build
  - test
  - push
  - deploy

build:
  stage: build
  allow_failure: false
  interruptible: true
  when: always
  script:
    - cd $BUILD_PATH
    - dotnet restore
    - dotnet build --no-restore
  rules:
    - !reference [ .default_rules, rules ]

.tests_coverage_template:
  variables:
    CONFIGURATION: "Debug"
    COVERAGE_FLAG: "XPlat Code Coverage"
    LOGGER_FLAG: "junit;LogFilePath=$CI_PROJECT_DIR/junit/junit-test-result.xml;MethodFormat=Class;FailureBodyFormat=Verbose"
  artifacts:
    when: always
    expire_in: 1 day
    reports:
      coverage_report:
        coverage_format: cobertura
        path: $CI_PROJECT_DIR/cobertura/*/coverage.cobertura.xml
      junit:
        - $CI_PROJECT_DIR/junit/junit-test-result.xml
  coverage: /TOTAL_COVERAGE=(\d+.\d+)/

unit tests:
  stage: test
  needs: [ build ]
  extends: .tests_coverage_template
  allow_failure: false
  interruptible: true
  script:
    - cd $TESTS_PATH
    - dotnet restore
    - dotnet test --no-restore -c $CONFIGURATION --results-directory $CI_PROJECT_DIR/cobertura --collect:"$COVERAGE_FLAG" --test-adapter-path:. --logger:"$LOGGER_FLAG" --settings ../coverage.runsettings
    - cd $CI_PROJECT_DIR
    - chmod +x ./dotnet-coverage.sh
    - ./dotnet-coverage.sh $CI_PROJECT_DIR/cobertura
  dependencies:
    - build
  rules:
    - !reference [ .default_rules, rules ]

integration tests:
  stage: test
  needs: [ build ]
  extends: .tests_coverage_template
  allow_failure: false
  interruptible: true
  script:
    - echo "Integration tests completed successfully"
  dependencies:
    - build
  rules:
    - !reference [ .default_rules, rules ]

image push:
  image: docker:latest
  services:
    - docker:dind
  needs: [ unit tests, integration tests ]
  stage: push
  allow_failure: false
  interruptible: false
  when: on_success
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
  script:
    - docker build --platform linux/amd64 -t $CI_REGISTRY_IMAGE -f Source/Presentation/BaCS.Presentation.API/Dockerfile .
    - docker push $CI_REGISTRY_IMAGE
  rules:
    - !reference [ .default_rules, rules ]

image deploy:
  image: alpine:latest
  services:
    - docker:dind
  needs: [ image push ]
  stage: deploy
  allow_failure: false
  interruptible: false
  when: manual
  before_script:
    - apk add --no-cache openssh-client
  script:
    - eval $(ssh-agent -s)
    - echo "$SSH_SERVER_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - ssh -o StrictHostKeyChecking=no $SSH_SERVER_USER@$SSH_SERVER_IP '
      docker pull $CI_REGISTRY_IMAGE &&
      docker compose down bacs.api &&
      docker compose up bacs.api -d'
  rules:
    - !reference [ .default_rules, rules ]

